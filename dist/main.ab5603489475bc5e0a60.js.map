{"version":3,"file":"main.ab5603489475bc5e0a60.js","mappings":"mBAAe,SAASA,IACvB,MAAMC,EAAgB,IAAIC,IACpBC,EAAQ,IAAIC,IAGZC,EAAY,CAACC,EAAKC,KACvBD,EAAIE,SAASC,IACZN,EAAMO,IAAI,GAAGD,EAAQ,KAAKA,EAAQ,KAAMF,EAAK,GAC5C,EAIGI,EAAkBL,IAEvBH,EAAMS,IAAI,GAAGN,EAAI,KAAKA,EAAI,KAAK,EAmF1BO,EAAsB,CAACC,EAAOC,EAAKC,KACxC,IAAIC,EAAM,GACNC,GAAKJ,EAAM,GACXK,GAAKL,EAAM,GACf,GAAY,KAARE,EAAa,CAChBC,EAAIG,KAAK,CAACF,EAAI,EAAGC,EAAI,IACrBF,EAAIG,KAAK,CAACF,EAAGC,EAAI,IACjBF,EAAIG,KAAK,CAACF,EAAI,EAAGC,EAAI,IAErB,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAKM,IACxBJ,EAAIG,KAAK,CAACF,EAAI,EAAGC,IACjBF,EAAIG,KAAK,CAACF,EAAGC,IACbF,EAAIG,KAAK,CAACF,EAAI,EAAGC,IACjBA,GAAQ,EAETF,EAAIG,KAAK,CAACF,EAAI,EAAGC,IACjBF,EAAIG,KAAK,CAACF,EAAGC,IACbF,EAAIG,KAAK,CAACF,EAAI,EAAGC,GAClB,KAAO,CACNF,EAAIG,KAAK,CAACF,EAAI,EAAGC,EAAI,IACrBF,EAAIG,KAAK,CAACF,EAAI,EAAGC,IACjBF,EAAIG,KAAK,CAACF,EAAI,EAAGC,EAAI,IAErB,IAAK,IAAIE,EAAI,EAAGA,EAAIN,EAAKM,IACxBJ,EAAIG,KAAK,CAACF,EAAGC,EAAI,IACjBF,EAAIG,KAAK,CAACF,EAAGC,IACbF,EAAIG,KAAK,CAACF,EAAGC,GAAK,GAClBD,GAAQ,EAGTD,EAAIG,KAAK,CAACF,EAAGC,EAAI,IACjBF,EAAIG,KAAK,CAACF,EAAGC,IACbF,EAAIG,KAAK,CAACF,EAAGC,EAAI,GAClB,CAEA,OAAOF,CAAG,EAEX,MAAO,CACNd,QACAE,YACAM,iBACAW,uBAxH8B,CAACC,EAAOP,EAAMD,EAAKR,KACjD,IAAIW,EAAIK,EAAM,GACVJ,EAAII,EAAM,GACd,GAAIL,EAAI,GAAKC,EAAI,GAAKD,EAAI,GAAKC,EAAI,EAAG,MAAM,IAAIK,MAChD,IAAIC,EAAY,GACZR,GAAM,EAIV,GAFAA,EA+B0B,EAACH,EAAOC,EAAKC,KACvC,IAAIO,EAAQV,EAAoBC,EAAOC,EAAKC,GAC5C,IAAK,IAAIK,EAAI,EAAGA,EAAIE,EAAMG,OAAQL,IACjC,GAAiDM,MAA7CxB,EAAMS,IAAI,GAAGW,EAAMF,GAAG,KAAKE,EAAMF,GAAG,MAAoB,OAAO,EAGpE,OAAO,CAAI,EArCLO,CAAmBL,EAAOR,EAAKC,GAEzB,KAARA,EAAa,CAChB,GAAIE,EAAIH,EAAM,EAAG,MAAM,IAAIS,MAC3B,IAAK,IAAIH,EAAI,EAAGA,EAAIN,EAAKM,IAAK,CAC7B,GAAkCM,MAA9BhB,EAAe,CAACO,EAAGC,EAAIE,IAG1B,MAAM,IAAIG,MAFVC,EAAUL,KAAK,CAACF,EAAGC,EAAIE,GAIzB,CACD,KAAO,CACN,GAAIF,EAAIJ,EAAM,EAAG,MAAM,IAAIS,MAC3B,IAAK,IAAIH,EAAI,EAAGA,EAAIN,EAAKM,IAAK,CAC7B,GAAkCM,MAA9BhB,EAAe,CAACO,EAAIG,EAAGF,IAG1B,MAAM,IAAIK,MAFVC,EAAUL,KAAK,CAACF,EAAIG,EAAGF,GAIzB,CACD,CAOA,OANW,GAAPF,GACHZ,EAAUoB,EAAWlB,GAKfU,CAAG,EAuFVY,OAzEc,SAAUN,EAAOO,GAC/B,IAAIC,EAAO,GAAGR,EAAM,KAAKA,EAAM,KAE/B,GAA+B,GAA3BtB,EAAc+B,IAAID,GAAgB,CACrC9B,EAAcgC,IAAIF,GAClB,IAAIG,EAAW/B,EAAMS,IAAImB,GACzB,GAAgBJ,MAAZO,EAAuB,CAC1B,IAAIC,EAAWL,EAAWM,cAC1BC,QAAQC,IAAIC,KAAKC,cAGjBL,EAASD,GAAUO,MACgB,GAA/BN,EAASD,GAAUQ,WACP7B,EACdsB,EAASD,GAAUpB,MACnBqB,EAASD,GAAUR,OACnBS,EAASD,GAAUlB,MAEXR,SAASmC,IACjB1C,EAAcgC,IAAI,GAAGU,EAAE,KAAKA,EAAE,KAAK,WAG7BR,EAASD,GAElB,CACD,CACA,OAAO/B,EAAMyC,OAAOb,EACrB,EAgDD,CC7Ie,SAASc,IACpB,IAAIC,EAAW,CAAC,EAChB,MAAMC,EAAU,SAASrB,GACrB,MAAO,CACHA,SACAsB,OAAQ,EACRC,MAAM,EACNR,IAAK,WACD,KAAGF,KAAKS,OAAOT,KAAKb,QAIhB,OAAO,IAHLa,KAAKS,MAKf,EACAN,OAAQ,WAEJ,OADGH,KAAKb,QAAUa,KAAKS,SAAQT,KAAKU,MAAO,GACpCV,KAAKU,IAChB,EAKR,EAcA,MAAM,CACFH,WACAC,UACAG,kBAhBsB,SAASxB,EAAOV,EAAKF,GAC3C,IAAIqC,EAASC,OAAOC,KAAKP,GAAUpB,OAC/B4B,EAAQP,EAAQrB,GAIpB,OAHA4B,EAAMtC,KAAOA,EACbsC,EAAMxC,MAAQA,EACdgC,EAAS,OAAOK,EAAO,KAAOG,EACvBA,CACX,EAUIlB,YATgB,WAEhB,OAAOU,CACX,EAQJ,CCzCqB9C,IACA6C,ICArB,MAAMU,EAAkBC,SAASC,cAAc,uBACzCC,EAAOF,SAASC,cAAc,QACpCpB,QAAQC,IAAIiB,GACZA,EAAgBI,iBAAiB,SAAS,KAC3BH,SAASC,cAAc,uBAC/BG,WAAW,IAElB,MAAMC,ECVS,WACX,MAAM1D,EAAQqD,SAASM,cAAc,OACrC3D,EAAM4D,UAAY,aAElB,IAAI,IAAI1C,EAAE,EAAEA,EAAE,GAAGA,IACb,IAAK,IAAI2C,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,MAAMC,EAAOT,SAASM,cAAc,OACpCG,EAAKF,UAAY,OACjBE,EAAKC,QAAQC,IAAM9C,EACnB4C,EAAKC,QAAQE,IAAMJ,EACnB7D,EAAMkE,YAAYJ,EACtB,CAEJ,OAAO9D,CACX,CDJoBmE,GAEdC,EAAwBf,SAASM,cAAc,OACrDS,EAAsBR,UAAY,2BAGlC,MAAMS,EAAgBhB,SAASM,cAAc,OAC7CU,EAAcT,UAAY,sBAG1B,MAAMU,EAAqBjB,SAASM,cAAc,OAClDW,EAAmBV,UAAY,kBAG/B,IAAIW,EAAY,CACf,UACA,aACA,YACA,YACA,eAED,IAAK,IAAIrD,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,MAAMd,EAAOiD,SAASM,cAAc,OACpCvD,EAAKoE,WAAY,EACjBpE,EAAKqE,IAAM,YAAYF,EAAUrD,SAC9Bd,EAAKsE,IAAM,GAAGH,EAAUrD,iBAC3Bd,EAAKwD,UAAY,OACjBxD,EAAKuE,GAAKJ,EAAUrD,GACjBoD,EAAmBJ,YAAY9D,EACnC,CAGA,MAAMwE,EAAiBvB,SAASM,cAAc,OAC9CiB,EAAehB,UAAY,6BAG3B,MAAMiB,EAA4BxB,SAASM,cAAc,QACzDkB,EAA0BC,YAAc,oBACxCT,EAAcH,YAAYW,GAE1BR,EAAcH,YAAYI,GAI1B,MAAMS,EAAW1B,SAASM,cAAc,OACxCoB,EAASnB,UAAY,mBACrBgB,EAAeV,YAAYa,GAG3BA,EAASb,YAAYR,GAIrBU,EAAsBF,YAAYG,GAClCD,EAAsBF,YAAYU,GAGlCrB,EAAKW,YAAYE,GEhEIvE,IACA6C,G","sources":["webpack://battleship/./src/gameboard.js","webpack://battleship/./src/shipLogic.js","webpack://battleship/./src/player.js","webpack://battleship/./src/DOM/dom.js","webpack://battleship/./src/DOM/generateBoard.js","webpack://battleship/./src/computer.js"],"sourcesContent":["export default function gameboard() {\r\n\tconst cordsAttacked = new Set();\r\n\tconst board = new Map();\r\n\r\n\t// 1\r\n\tconst placeShip = (arr, ship) => {\r\n\t\tarr.forEach((element) => {\r\n\t\t\tboard.set(`${element[0]}${element[1]}`, ship);\r\n\t\t});\r\n\t};\r\n\r\n\t// 2\r\n\tconst getShipOnCords = (arr) => {\r\n\t\t// returns undefined if there is no ship in the cords.\r\n\t\tboard.get(`${arr[0]}${arr[1]}`);\r\n\t};\r\n\r\n\t// 3\r\n\tconst checkCordsForPlacement = (cords, axis, len, ship) => {\r\n\t\tlet x = cords[0];\r\n\t\tlet y = cords[1];\r\n\t\tif (x > 9 || y > 9 || x < 0 || y < 0) throw new Error();\r\n\t\tlet shipCords = [];\r\n\t\tlet ans = false;\r\n\r\n\t\tans = checkAdjacentCords(cords, len, axis);\r\n\r\n\t\tif (axis == \"x\") {\r\n\t\t\tif (x + len > 9) throw new Error();\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tif (getShipOnCords([x, y + i]) == undefined) {\r\n\t\t\t\t\tshipCords.push([x, y + i]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (y + len > 9) throw new Error();\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tif (getShipOnCords([x + i, y]) == undefined) {\r\n\t\t\t\t\tshipCords.push([x + i, y]);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthrow new Error();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (ans == true) {\r\n\t\t\tplaceShip(shipCords, ship);\r\n\t\t}\r\n\r\n\t\t// console.log(board);\r\n\r\n\t\treturn ans;\r\n\t};\r\n\r\n\t// 4\r\n\tconst checkAdjacentCords = (start, len, axis) => {\r\n\t\tlet cords = getAdjacentPostions(start, len, axis);\r\n\t\tfor (let i = 0; i < cords.length; i++) {\r\n\t\t\tif (board.get(`${cords[i][0]}${cords[i][1]}`) != undefined) return false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t};\r\n\r\n\t// 5\r\n\tconst fireAt = function (cords, playerType) {\r\n\t\tlet cord = `${cords[0]}${cords[1]}`;\r\n\t\t// console.log(this);\r\n\t\tif (cordsAttacked.has(cord) == false) {\r\n\t\t\tcordsAttacked.add(cord);\r\n\t\t\tlet shipName = board.get(cord);\r\n\t\t\tif (shipName != undefined) {\r\n\t\t\t\tlet shipList = playerType.getShipList();\r\n\t\t\t\tconsole.log(this.shipFunction);\r\n\t\t\t\t// console.log(shipName);\r\n\t\t\t\t// console.log(shipList);\r\n\t\t\t\tshipList[shipName].hit();\r\n\t\t\t\tif (shipList[shipName].isSunk() == true) {\r\n\t\t\t\t\tlet adjacent = getAdjacentPostions(\r\n\t\t\t\t\t\tshipList[shipName].start,\r\n\t\t\t\t\t\tshipList[shipName].length,\r\n\t\t\t\t\t\tshipList[shipName].axis\r\n\t\t\t\t\t);\r\n\t\t\t\t\tadjacent.forEach((e) => {\r\n\t\t\t\t\t\tcordsAttacked.add(`${e[0]}${e[1]}`);\r\n\t\t\t\t\t});\r\n\t\t\t\t\t// Do something to cross out all the adjacent postion on the board.\r\n\t\t\t\t\tdelete shipList[shipName];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn board.delete(cord);\r\n\t};\r\n\t// 6\r\n\tconst crossAdjacentPositions = () => {};\r\n\t// 7\r\n\tconst getAdjacentPostions = (start, len, axis) => {\r\n\t\tlet ans = [];\r\n\t\tlet x = +start[0];\r\n\t\tlet y = +start[1];\r\n\t\tif (axis == \"x\") {\r\n\t\t\tans.push([x - 1, y - 1]);\r\n\t\t\tans.push([x, y - 1]);\r\n\t\t\tans.push([x + 1, y - 1]);\r\n\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tans.push([x - 1, y]);\r\n\t\t\t\tans.push([x, y]);\r\n\t\t\t\tans.push([x + 1, y]);\r\n\t\t\t\ty = y + 1;\r\n\t\t\t}\r\n\t\t\tans.push([x - 1, y]);\r\n\t\t\tans.push([x, y]);\r\n\t\t\tans.push([x + 1, y]);\r\n\t\t} else {\r\n\t\t\tans.push([x - 1, y - 1]);\r\n\t\t\tans.push([x - 1, y]);\r\n\t\t\tans.push([x - 1, y + 1]);\r\n\r\n\t\t\tfor (let i = 0; i < len; i++) {\r\n\t\t\t\tans.push([x, y - 1]);\r\n\t\t\t\tans.push([x, y]);\r\n\t\t\t\tans.push([x, y] + 1);\r\n\t\t\t\tx = x + 1;\r\n\t\t\t}\r\n\r\n\t\t\tans.push([x, y - 1]);\r\n\t\t\tans.push([x, y]);\r\n\t\t\tans.push([x, y + 1]);\r\n\t\t}\r\n\t\t// console.log(ans);\r\n\t\treturn ans;\r\n\t};\r\n\treturn {\r\n\t\tboard,\r\n\t\tplaceShip,\r\n\t\tgetShipOnCords,\r\n\t\tcheckCordsForPlacement,\r\n\t\tfireAt,\r\n\t};\r\n}\r\n","export default function shipLogic(){\r\n    let allShips = {};\r\n    const newShip = function(length) {\r\n        return {\r\n            length,\r\n            hit_No: 0,\r\n            sunk: false,\r\n            hit: function(){\r\n                if(this.hit_No<this.length){\r\n                    ++this.hit_No;\r\n                }\r\n                else{\r\n                    return false;\r\n                }\r\n            },\r\n            isSunk: function(){\r\n                if(this.length == this.hit_No) this.sunk = true;\r\n                return this.sunk;\r\n            }\r\n            // EXTRA ADDED VALUES\r\n            // axis\r\n            // start\r\n        }\r\n    }\r\n    const addShipToAllShips = function(length,axis,start) {\r\n        let shipNo = Object.keys(allShips).length;\r\n        let nShip = newShip(length)\r\n        nShip.axis = axis;\r\n        nShip.start = start\r\n        allShips[`ship${shipNo+1}`] = nShip;\r\n        return nShip;\r\n    }\r\n    const getShipList = function(){\r\n        // console.log(allShips);\r\n        return allShips;\r\n    }\r\n\r\n    return{\r\n        allShips,\r\n        newShip,\r\n        addShipToAllShips,\r\n        getShipList,\r\n    }\r\n}\r\n\r\n// const shipFunctons = shipLogic();\r\n\r\n// shipFunctons.addShipToAllShips(3,\"x\",[1,1]);\r\n// shipFunctons.addShipToAllShips(3,\"x\",[4,1]);\r\n// console.log(allShips);\r\n// allShips[\"ship1\"].hit();\r\n// allShips[\"ship1\"].hit();\r\n// allShips[\"ship1\"].hit();\r\n// allShips[\"ship1\"].hit();\r\n// allShips[\"ship1\"].hit();\r\n// allShips[\"ship1\"].hit();\r\n// console.log(allShips);\r\n// let allShips = shipFunctons.getShipList();\r\n// console.log(allShips);\r\n","import gameboard from \"./gameboard\";\r\nimport shipLogic from \"./shipLogic\";\r\nconst gameFunction = gameboard();\r\nconst shipFunction = shipLogic();\r\n\r\nexport default function player(){\r\n    const playerShoot = function(cords){\r\n        if(Object.keys(shipFunction.getShipList()).length == 0){\r\n            return \"no ships to shoot\";\r\n        }\r\n        let hitShip = gameFunction.fireAt(cords,shipFunction);\r\n        if(Object.keys(shipFunction.getShipList()).length == 0){\r\n            return \"Game over\";\r\n        }\r\n        return hitShip;\r\n    }\r\n    const playerBoard = function(){\r\n        return gameFunction.board;\r\n    }\r\n    const playerCordsCheck = function(cords,axis,len,shipName){\r\n        if(gameFunction.checkCordsForPlacement(cords,axis,len,shipName) == true){\r\n            shipFunction.addShipToAllShips(len,axis,cords);\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    const playerGetShip = function(cords,axis,len,shipN){\r\n        return shipFunction.addShipToAllShips(len);\r\n    }\r\n    return{\r\n        playerShoot,\r\n        playerBoard,\r\n        playerCordsCheck,\r\n        playerGetShip,\r\n    }\r\n}\r\n// export{}","import { getShip, getBoard, receiveAttack } from \"..\";\r\nimport generateBoard from \"./generateBoard\";\r\n\r\nconst howToPlayButton = document.querySelector(\".how-to-play-button\");\r\nconst main = document.querySelector(\"main\");\r\nconsole.log(howToPlayButton);\r\nhowToPlayButton.addEventListener(\"click\", () => {\r\n\tconst modal = document.querySelector(\"#how-to-play-dialog\");\r\n\tmodal.showModal();\r\n});\r\nconst playerBoard = generateBoard();\r\n// playerBoard.classList.add(\"player-board\");\r\nconst playerShipDeployModal = document.createElement(\"div\");\r\nplayerShipDeployModal.className = \"player-ship-deploy-modal\";\r\n\r\n// player ships container\r\nconst shipContainer = document.createElement(\"div\");\r\nshipContainer.className = \"ship-grid-container\";\r\n\r\n// ships image container\r\nconst shipImageContainer = document.createElement(\"div\");\r\nshipImageContainer.className = \"ships-container\";\r\n\r\n// ship divs\r\nlet shipNames = [\r\n\t\"carrier\",\r\n\t\"battleship\",\r\n\t\"destroyer\",\r\n\t\"submarine\",\r\n\t\"patrol-boat\",\r\n];\r\nfor (let i = 0; i < 5; i++) {\r\n\tconst ship = document.createElement(\"img\");\r\n\tship.draggable = true;\r\n\tship.src = `./images/${shipNames[i]}.png`;\r\n    ship.alt = `${shipNames[i]}-placeholder`;\r\n\tship.className = `ship`;\r\n\tship.id = shipNames[i];\r\n    shipImageContainer.appendChild(ship);\r\n}\r\n\r\n// player ship deployment grid container\r\nconst shipDeployGird = document.createElement(\"div\");\r\nshipDeployGird.className = \"ship-deploy-grid-container\";\r\n\r\n// place your ship heading\r\nconst placeShipContainerHeading = document.createElement(\"span\");\r\nplaceShipContainerHeading.textContent = \"Place your ships:\";\r\nshipContainer.appendChild(placeShipContainerHeading);\r\n// adding the ships image container to its plae\r\nshipContainer.appendChild(shipImageContainer);\r\n\r\n\r\n// player ship deployment grid\r\nconst shipGrid = document.createElement(\"div\");\r\nshipGrid.className = \"ship-deploy-grid\";\r\nshipDeployGird.appendChild(shipGrid);\r\n\r\n// adding ship grid to its container\r\nshipGrid.appendChild(playerBoard);\r\n// shipDeployGird.appendChild(shipDeployGird);\r\n\r\n// adding both container to its parent\r\nplayerShipDeployModal.appendChild(shipContainer);\r\nplayerShipDeployModal.appendChild(shipDeployGird);\r\n\r\n// adding to main container\r\nmain.appendChild(playerShipDeployModal);\r\n\r\n// main.appendChild(playerBoard);\r\n","export default function generateBoard(){\r\n    const board = document.createElement(\"div\");\r\n    board.className = \"ship-board\";\r\n\r\n    for(let i=0;i<10;i++){\r\n        for (let j = 0; j < 10; j++) {\r\n            const cell = document.createElement(\"div\");\r\n            cell.className = \"cell\";\r\n            cell.dataset.row = i;\r\n            cell.dataset.col = j;\r\n            board.appendChild(cell);\r\n        }\r\n    }\r\n    return board;\r\n}","import gameboard from \"./gameboard.js\";\r\nimport shipLogic from \"./shipLogic.js\";\r\nimport randomize from \"./randomize.js\";\r\nconst gameFunction = gameboard();\r\nconst shipFunction = shipLogic();\r\n\r\nlet ships = [\r\n\t[\"Carrier\", 5],\r\n\t[\"Battleship\", 4],\r\n\t[\"Destroyer\", 3],\r\n\t[\"Submarine\", 3],\r\n\t[\"Patrol Boat\", 2],\r\n];\r\nexport default function computer() {\r\n\t\r\n\tlet occupiedCords = [];\r\n\t// const computerShoot = function () {\r\n\t// \tlet randomX = Math.random() * 10;\r\n\t// \tlet randomY = Math.random() * 10;\r\n\r\n\t// \tif (Object.keys(shipFunction.getShipList()).length == 0) {\r\n\t// \t\treturn \"no ships to shoot\";\r\n\t// \t}\r\n\t// \tlet hitShip = gameFunction.fireAt([randomX, randomY], shipFunction);\r\n\t// \tif (Object.keys(shipFunction.getShipList()).length == 0) {\r\n\t// \t\treturn \"Game over\";\r\n\t// \t}\r\n\t// \treturn hitShip;\r\n\t// };\r\n\tconst computerBoard = function () {\r\n\t\treturn gameFunction.board;\r\n\t};\r\n\tconst computerCordsCheck = function (cords, axis, len, shipName) {\r\n\t\t// apply loop using the length of ships(look at the top of module) and call below for each vlaue.\r\n\r\n\t\ttry {\r\n\t\t\tif(gameFunction.checkCordsForPlacement(cords, axis, len, shipName)==true){\r\n\t\t\t\tshipFunction.addShipToAllShips(len, axis, cords);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n        }\r\n\t\tcatch(err) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t};\r\n\tconst computerGetShip = function (cords, axis, len, shipN) {\r\n\t\treturn shipFunction.addShipToAllShips(len);\r\n\t};\r\n\tconst placeShips = function () {\r\n\t\trandomize(ships,gameFunction,shipFunction);\r\n\t};\r\n\treturn {\r\n\t\t// computerShoot,\r\n\t\tcomputerBoard,\r\n\t\tcomputerCordsCheck,\r\n\t\tcomputerGetShip,\r\n\t\tplaceShips,\r\n\t};\r\n}\r\n\r\n// let fun = computer();\r\n// fun.placeShips();\r\n// console.log(fun.computerBoard());\r\n// console.log(shipFunction.getShipList());\r\n\r\n// export{ships};"],"names":["gameboard","cordsAttacked","Set","board","Map","placeShip","arr","ship","forEach","element","set","getShipOnCords","get","getAdjacentPostions","start","len","axis","ans","x","y","push","i","checkCordsForPlacement","cords","Error","shipCords","length","undefined","checkAdjacentCords","fireAt","playerType","cord","has","add","shipName","shipList","getShipList","console","log","this","shipFunction","hit","isSunk","e","delete","shipLogic","allShips","newShip","hit_No","sunk","addShipToAllShips","shipNo","Object","keys","nShip","howToPlayButton","document","querySelector","main","addEventListener","showModal","playerBoard","createElement","className","j","cell","dataset","row","col","appendChild","generateBoard","playerShipDeployModal","shipContainer","shipImageContainer","shipNames","draggable","src","alt","id","shipDeployGird","placeShipContainerHeading","textContent","shipGrid"],"sourceRoot":""}