{"version":3,"file":"main.c8716c2bc6e5aef8aa1c.js","mappings":"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","sources":["webpack://battleship/webpack/bootstrap","webpack://battleship/./src/gameboard.js","webpack://battleship/./src/shipLogic.js","webpack://battleship/webpack/runtime/global","webpack://battleship/webpack/runtime/publicPath","webpack://battleship/./src/player.js","webpack://battleship/./src/DOM/generateBoard.js","webpack://battleship/./src/DOM/dom.js","webpack://battleship/./src/images/imagesImportFunction.js","webpack://battleship/./src/computer.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","export default function gameboard() {\n\tconst cordsAttacked = new Set();\n\tconst board = new Map();\n\n\t// 1\n\tconst placeShip = (arr, ship) => {\n\t\tarr.forEach((element) => {\n\t\t\tboard.set(`${element[0]}${element[1]}`, ship);\n\t\t});\n\t};\n\n\t// 2\n\tconst getShipOnCords = (arr) => {\n\t\t// returns undefined if there is no ship in the cords.\n\t\tboard.get(`${arr[0]}${arr[1]}`);\n\t};\n\n\t// 3\n\tconst checkCordsForPlacement = (cords, axis, len, ship) => {\n\t\t// CHECK IF THE MAP CONTAINS A SHIP WITH THE SAME NAME\n\t\tboard.forEach((value,key)=>{\n\t\t\tif(value == ship){\n\t\t\t\tboard.delete(key);\n\t\t\t}\n\t\t})\n\t\tlet x = +cords[0];\n\t\tlet y = +cords[1];\n\t\tlen = +len;\n\t\tif (x > 9 || y > 9 || x < 0 || y < 0) throw new Error();\n\t\tlet shipCords = [];\n\t\tlet ans = false;\n\t\t// console.log(`${cords} ${axis} ${len} ${ship}`);\n\t\tans = checkAdjacentCords(cords, len, axis);\n\t\t\n\t\tif (axis == \"x\") {\n\t\t\tif (y + len-1 > 9) throw new Error();\n\t\t\tconsole.log(\"x-axis condition passed\");\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tif (getShipOnCords([x, y + i]) == undefined) {\n\t\t\t\t\tshipCords.push([x, y + i]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (x + len-1 > 9) throw new Error();\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tif (getShipOnCords([x + i, y]) == undefined) {\n\t\t\t\t\tshipCords.push([x + i, y]);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (ans == true) {\n\t\t\tplaceShip(shipCords, ship);\n\t\t}\n\t\tconsole.log(board);\n\n\t\t// console.log(board);\n\n\t\treturn ans;\n\t};\n\n\t// 4\n\tconst checkAdjacentCords = (start, len, axis) => {\n\t\tlet cords = getAdjacentPostions(start, len, axis);\n\t\tfor (let i = 0; i < cords.length; i++) {\n\t\t\tif (board.get(`${cords[i][0]}${cords[i][1]}`) != undefined) return false;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\t// 5\n\tconst fireAt = function (cords, playerType) {\n\t\tlet cord = `${cords[0]}${cords[1]}`;\n\t\t// console.log(this);\n\t\tif (cordsAttacked.has(cord) == false) {\n\t\t\tcordsAttacked.add(cord);\n\t\t\tlet shipName = board.get(cord);\n\t\t\tif (shipName != undefined) {\n\t\t\t\tlet shipList = playerType.getShipList();\n\t\t\t\tconsole.log(this.shipFunction);\n\t\t\t\t// console.log(shipName);\n\t\t\t\t// console.log(shipList);\n\t\t\t\tshipList[shipName].hit();\n\t\t\t\tif (shipList[shipName].isSunk() == true) {\n\t\t\t\t\tlet adjacent = getAdjacentPostions(\n\t\t\t\t\t\tshipList[shipName].start,\n\t\t\t\t\t\tshipList[shipName].length,\n\t\t\t\t\t\tshipList[shipName].axis\n\t\t\t\t\t);\n\t\t\t\t\tadjacent.forEach((e) => {\n\t\t\t\t\t\tcordsAttacked.add(`${e[0]}${e[1]}`);\n\t\t\t\t\t});\n\t\t\t\t\t// Do something to cross out all the adjacent postion on the board.\n\t\t\t\t\tdelete shipList[shipName];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn board.delete(cord);\n\t};\n\t// 6\n\tconst crossAdjacentPositions = () => {};\n\t// 7\n\tconst getAdjacentPostions = (start, len, axis) => {\n\t\tlet ans = [];\n\t\tlet x = +start[0];\n\t\tlet y = +start[1];\n\t\tif (axis == \"x\") {\n\t\t\tans.push([x - 1, y - 1]);\n\t\t\tans.push([x, y - 1]);\n\t\t\tans.push([x + 1, y - 1]);\n\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tans.push([x - 1, y]);\n\t\t\t\tans.push([x, y]);\n\t\t\t\tans.push([x + 1, y]);\n\t\t\t\ty = y + 1;\n\t\t\t}\n\t\t\tans.push([x - 1, y]);\n\t\t\tans.push([x, y]);\n\t\t\tans.push([x + 1, y]);\n\t\t} else {\n\t\t\tans.push([x - 1, y - 1]);\n\t\t\tans.push([x - 1, y]);\n\t\t\tans.push([x - 1, y + 1]);\n\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tans.push([x, y - 1]);\n\t\t\t\tans.push([x, y]);\n\t\t\t\tans.push([x, y] + 1);\n\t\t\t\tx = x + 1;\n\t\t\t}\n\n\t\t\tans.push([x, y - 1]);\n\t\t\tans.push([x, y]);\n\t\t\tans.push([x, y + 1]);\n\t\t}\n\t\t// console.log(ans);\n\t\treturn ans;\n\t};\n\treturn {\n\t\tboard,\n\t\tplaceShip,\n\t\tgetShipOnCords,\n\t\tcheckCordsForPlacement,\n\t\tfireAt,\n\t};\n}\n","export default function shipLogic(){\n    let allShips = {};\n    const newShip = function(length) {\n        return {\n            length,\n            hit_No: 0,\n            sunk: false,\n            hit: function(){\n                if(this.hit_No<this.length){\n                    ++this.hit_No;\n                }\n                else{\n                    return false;\n                }\n            },\n            isSunk: function(){\n                if(this.length == this.hit_No) this.sunk = true;\n                return this.sunk;\n            }\n            // EXTRA ADDED VALUES\n            // axis\n            // start\n        }\n    }\n    const addShipToAllShips = function(length,axis,start) {\n        let shipNo = Object.keys(allShips).length;\n        let nShip = newShip(length)\n        nShip.axis = axis;\n        nShip.start = start\n        allShips[`ship${shipNo+1}`] = nShip;\n        return nShip;\n    }\n    const getShipList = function(){\n        // console.log(allShips);\n        return allShips;\n    }\n\n    return{\n        allShips,\n        newShip,\n        addShipToAllShips,\n        getShipList,\n    }\n}\n\n// const shipFunctons = shipLogic();\n\n// shipFunctons.addShipToAllShips(3,\"x\",[1,1]);\n// shipFunctons.addShipToAllShips(3,\"x\",[4,1]);\n// console.log(allShips);\n// allShips[\"ship1\"].hit();\n// allShips[\"ship1\"].hit();\n// allShips[\"ship1\"].hit();\n// allShips[\"ship1\"].hit();\n// allShips[\"ship1\"].hit();\n// allShips[\"ship1\"].hit();\n// console.log(allShips);\n// let allShips = shipFunctons.getShipList();\n// console.log(allShips);\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && !scriptUrl) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","import gameboard from \"./gameboard\";\nimport shipLogic from \"./shipLogic\";\nconst gameFunction = gameboard();\nconst shipFunction = shipLogic();\nexport default function player(){\n    const playerShoot = function(cords){\n        if(Object.keys(shipFunction.getShipList()).length == 0){\n            return \"no ships to shoot\";\n        }\n        let hitShip = gameFunction.fireAt(cords,shipFunction);\n        if(Object.keys(shipFunction.getShipList()).length == 0){\n            return \"Game over\";\n        }\n        return hitShip;\n    }\n    const playerBoard = function(){\n        return gameFunction.board;\n    }\n    const playerCordsCheck = function(cords,axis,len,shipName){\n        if(gameFunction.checkCordsForPlacement(cords,axis,len,shipName) == true){\n            // const shipHarbor = document.querySelector('.ships-container');\n            // console.log(shipHarbor.children.length);\n            // if(shipHarbor.children.length == 0){\n            //     document.querySelector('.game-start-button').disabled = false;\n            // }\n            shipFunction.addShipToAllShips(len,axis,cords);\n            return true;\n        }else{\n            return false;\n        }\n    }\n    const playerGetShip = function(cords,axis,len,shipN){\n        return shipFunction.addShipToAllShips(len);\n    }\n    return{\n        playerShoot,\n        playerBoard,\n        playerCordsCheck,\n        playerGetShip,\n    }\n}\n// export{}","// generate the board and add events to the blocks.\n\nimport gameboard from \"../gameboard\";\nconst boardFunctions = gameboard();\n\nexport default function generateBoard(addEvents=false){\n    const board = document.createElement(\"div\");\n    board.className = \"ship-board\";\n\n    for(let i=0;i<10;i++){\n        for (let j = 0; j < 10; j++) {\n            const cell = document.createElement(\"div\");\n            cell.className = \"cell\";\n            cell.draggable = false;\n            cell.dataset.row = i;\n            cell.dataset.col = j;\n            cell.style.position = \"relative\";\n            if(addEvents == true){\n                cell.addEventListener('dragenter',function(e){\n                    this.classList.add('over');\n                })\n                cell.addEventListener('dragover',function(e){\n                    e.preventDefault();\n                    return false;\n                })\n                cell.addEventListener('dragleave',function(e){\n                    this.classList.remove('over');                    \n                })\n                cell.addEventListener('drop',function(e){\n                    this.classList.remove('over');                    \n                    e.preventDefault();\n                    // console.log(e.target);\n                    \n                    try{\n                        const data =  e.dataTransfer.getData('text/html');\n                        const ele = document.querySelector(`#${data}`);\n                        // console.log(ele);\n                        // console.log(e.target);\n                        // console.log(ele.dataset.len);\n                        // const res = boardFunctions.checkCordsForPlacement([i,j],\"x\",ele.dataset.len,`${data}`);\n                        // console.log(res);\n                        if(boardFunctions.checkCordsForPlacement([e.target.dataset.row,e.target.dataset.col],\"x\",ele.dataset.len,`${data}`)){\n                            const shipHarbor = document.querySelector('.ships-container');\n                            console.log(shipHarbor.children.length);\n                            console.log('akjdflakj')\n                            if(shipHarbor.children.length == 0){\n                                document.querySelector('.game-start-button').disabled = false;\n                            }\n                            e.target.appendChild(ele);\n\n                        }\n                    }\n                    catch(err){\n                        console.log(err);\n                    }\n\n                    // console.log(data);\n                })\n            }\n            board.appendChild(cell);\n        }\n    }\n    return board;\n}\n","// Loads the ships images and calls the generateBoard for gameboard.\nimport imageImporter from \"../images/imagesImportFunction\";\nimport { getShip, getBoard, receiveAttack } from \"..\";\nimport generateBoard from \"./generateBoard\";\nconst Images = imageImporter();\n\nconst howToPlayButton = document.querySelector(\".how-to-play-button\");\nconst main = document.querySelector(\"main\");\nconsole.log(howToPlayButton);\nhowToPlayButton.addEventListener(\"click\", () => {\n\tconst modal = document.querySelector(\"#how-to-play-dialog\");\n\tmodal.showModal();\n});\nconst playerBoard = generateBoard(true);\n// playerBoard.classList.add(\"player-board\");\nconst playerShipDeployModal = document.createElement(\"div\");\nplayerShipDeployModal.className = \"player-ship-deploy-modal\";\n\n// player ships container\nconst shipContainer = document.createElement(\"div\");\nshipContainer.className = \"ship-grid-container\";\n\n// ships image container\nconst shipImageContainer = document.createElement(\"div\");\nshipImageContainer.className = \"ships-container\";\n\n// ship divs\nfunction handleDragStart(e){\n\tthis.style.opacity = '0.4';\n\n\t// dragSrcEl = this;\n\te.dataTransfer.effectAllowed = 'move';\n\tconsole.log(this.id);\n\te.dataTransfer.setData('text/html', this.id);\n}\nfunction handleDragEnd(){\n\tthis.style.opacity = '1';\n}\nlet shipNames = [\n\t[\"carrier\",5],\n\t[\"battleship\",4],\n\t[\"destroyer\",3],\n\t[\"submarine\",3],\n\t[\"patrol_boat\",2]\n];\nfor (let i = 0; i < 5; i++) {\n\tconst ship = document.createElement(\"img\");\n\tship.style.width = `${(shipNames[i][1]*50)-10}px`;\n\tship.style.cursor = \"move\"\n\tship.style.zIndex = 2;\n\tship.style.position = \"relative\";\n\tship.draggable = true;\n\tship.src = Images[shipNames[i][0]];\n    ship.alt = `${shipNames[i][0]}-placeholder`;\n\tship.className = `ship`;\n\tship.dataset.len = shipNames[i][1];\n\tship.id = shipNames[i][0];\n\tship.addEventListener('dragstart',handleDragStart);\n\tship.addEventListener('dragend',handleDragEnd);\n    shipImageContainer.appendChild(ship);\n}\n\n// player ship deployment grid container\nconst shipDeployGird = document.createElement(\"div\");\nshipDeployGird.className = \"ship-deploy-grid-container\";\n\n// place your ship heading\nconst placeShipContainerHeading = document.createElement(\"span\");\nplaceShipContainerHeading.textContent = \"Place your ships:\";\nshipContainer.appendChild(placeShipContainerHeading);\n// adding the ships image container to its plae\nshipContainer.appendChild(shipImageContainer);\n\n\n// player ship deployment grid\nconst shipGrid = document.createElement(\"div\");\nshipGrid.className = \"ship-deploy-grid\";\nshipDeployGird.appendChild(shipGrid);\n\n// adding ship grid to its container\nshipGrid.appendChild(playerBoard);\n// shipDeployGird.appendChild(shipDeployGird);\n\n// adding both container to its parent\nplayerShipDeployModal.appendChild(shipContainer);\nplayerShipDeployModal.appendChild(shipDeployGird);\n\n// adding to main container\nmain.appendChild(playerShipDeployModal);\n\n// main.appendChild(playerBoard);\n\n// Adding abutton to the main container to start the game \nconst startGameButton = document.createElement(\"button\");\nstartGameButton.textContent = \"Start\";\nstartGameButton.type = \"button\";\nstartGameButton.disabled=true;\nstartGameButton.className = \"game-start-button\";\nmain.appendChild(startGameButton);\n","import battleship from \"./battleship.png\"\nimport carrier from \"./carrier.png\"\nimport destroyer from \"./destroyer.png\"\nimport patrol_boat from \"./patrol-boat.png\"\nimport submarine from \"./submarine.png\"\n\nexport default function imageImporter(){\n    return{\n        battleship,\n        carrier,\n        destroyer,\n        patrol_boat,\n        submarine\n    }\n}","import gameboard from \"./gameboard.js\";\nimport shipLogic from \"./shipLogic.js\";\nimport randomize from \"./randomize.js\";\nconst gameFunction = gameboard();\nconst shipFunction = shipLogic();\n\nlet ships = [\n\t[\"Carrier\", 5],\n\t[\"Battleship\", 4],\n\t[\"Destroyer\", 3],\n\t[\"Submarine\", 3],\n\t[\"Patrol Boat\", 2],\n];\nexport default function computer() {\n\t\n\tlet occupiedCords = [];\n\t// const computerShoot = function () {\n\t// \tlet randomX = Math.random() * 10;\n\t// \tlet randomY = Math.random() * 10;\n\n\t// \tif (Object.keys(shipFunction.getShipList()).length == 0) {\n\t// \t\treturn \"no ships to shoot\";\n\t// \t}\n\t// \tlet hitShip = gameFunction.fireAt([randomX, randomY], shipFunction);\n\t// \tif (Object.keys(shipFunction.getShipList()).length == 0) {\n\t// \t\treturn \"Game over\";\n\t// \t}\n\t// \treturn hitShip;\n\t// };\n\tconst computerBoard = function () {\n\t\treturn gameFunction.board;\n\t};\n\tconst computerCordsCheck = function (cords, axis, len, shipName) {\n\t\t// apply loop using the length of ships(look at the top of module) and call below for each vlaue.\n\n\t\ttry {\n\t\t\tif(gameFunction.checkCordsForPlacement(cords, axis, len, shipName)==true){\n\t\t\t\tshipFunction.addShipToAllShips(len, axis, cords);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n        }\n\t\tcatch(err) {\n\t\t\treturn false;\n\t\t}\n\t};\n\tconst computerGetShip = function (cords, axis, len, shipN) {\n\t\treturn shipFunction.addShipToAllShips(len);\n\t};\n\tconst placeShips = function () {\n\t\trandomize(ships,gameFunction,shipFunction);\n\t};\n\treturn {\n\t\t// computerShoot,\n\t\tcomputerBoard,\n\t\tcomputerCordsCheck,\n\t\tcomputerGetShip,\n\t\tplaceShips,\n\t};\n}\n\n// let fun = computer();\n// fun.placeShips();\n// console.log(fun.computerBoard());\n// console.log(shipFunction.getShipList());\n\n// export{ships};"],"names":["__webpack_require__","gameboard","cordsAttacked","Set","board","Map","placeShip","arr","ship","forEach","element","set","getShipOnCords","get","getAdjacentPostions","start","len","axis","ans","x","y","push","i","checkCordsForPlacement","cords","value","key","delete","Error","shipCords","length","undefined","checkAdjacentCords","console","log","fireAt","playerType","cord","has","add","shipName","shipList","getShipList","this","shipFunction","hit","isSunk","e","shipLogic","allShips","newShip","hit_No","sunk","addShipToAllShips","shipNo","Object","keys","nShip","g","globalThis","Function","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","replace","p","boardFunctions","Images","battleship","carrier","destroyer","patrol_boat","submarine","howToPlayButton","querySelector","main","addEventListener","showModal","playerBoard","addEvents","createElement","className","j","cell","draggable","dataset","row","col","style","position","classList","preventDefault","remove","data","dataTransfer","getData","ele","target","shipHarbor","children","disabled","appendChild","err","generateBoard","playerShipDeployModal","shipContainer","shipImageContainer","handleDragStart","opacity","effectAllowed","id","setData","handleDragEnd","shipNames","width","cursor","zIndex","alt","shipDeployGird","placeShipContainerHeading","textContent","shipGrid","startGameButton","type"],"sourceRoot":""}